//routes.js

import express from 'express';
import main from './chat.js';
import { send, sendReaction } from './wzapchat.js';
import dataStore from './dataStore.js'; 
import { saveMessageHistory } from './db.js';

const router = express.Router();

router.post('/webhook', (req, res) => {
  res.sendStatus(200);
  const eventData = req.body;
  
//   console.log('Dados do Webhook recebidos:', eventData); 
  if (eventData && eventData.event === 'message:in:new') {
    // sendReaction(eventData, "üïë")
    

    
    
    // Verificar o tipo de mensagem
    let type = eventData.data.type;
    let quickRespomnse = '_digitando..._';
    switch (type) {
        case 'text':
            console.log('O usu√°rio enviou: text');
            quickRespomnse = '_digitando..._';
            break;
        case 'sticker':
            console.log('O usu√°rio enviou: sticker');
            quickRespomnse = 'Vi que voc√™ me enviou um sticker. Infelizmente, n√£o consigo interagir com stickers hoje. Por√©m, em breve, receberei uma atualiza√ß√£o para visualizar e interpretar stickers. Tamb√©m poderei criar e enviar stickers para voc√™ em breve.';
            break;
        case 'location':
            console.log('O usu√°rio enviou: location');
            quickRespomnse = 'Vi que voc√™ me enviou uma localiza√ß√£o. Infelizmente, ainda n√£o consigo interagir com localiza√ß√µes aqui no WhatsApp. Por√©m, em breve, receberei uma atualiza√ß√£o para visualizar e interpretar localiza√ß√µes.';
            break;
        case 'image':
            console.log('O usu√°rio enviou: image');
            quickRespomnse = 'Vi que voc√™ me enviou uma imagem. Infelizmente, n√£o consigo interagir com imagens hoje. Por√©m, em breve, receberei uma atualiza√ß√£o para visualizar e interpretar imagens. Tamb√©m poderei criar e enviar imagens para voc√™ em breve.';
            break;
        case 'audio':
            console.log('O usu√°rio enviou: audio');
            quickRespomnse = 'Vi que voc√™ me enviou um √°udio. Infelizmente, ainda n√£o consigo escutar √°udios. Por√©m, em breve, receberei uma atualiza√ß√£o para ouvir e interpretar √°udios. Tamb√©m poderei criar e enviar respostas em √°udio para voc√™ em breve.';
            break;
        case 'video':
            console.log('O usu√°rio enviou: video');
            quickRespomnse = 'Vi que voc√™ me enviou um v√≠deo. Infelizmente, ainda n√£o consigo assistir v√≠deos. Por√©m, em breve, receberei uma atualiza√ß√£o para ver e interpretar v√≠deos. Tamb√©m poderei criar e enviar v√≠deos para voc√™ em breve.';
            break;
        case 'document':
            console.log('O usu√°rio enviou: document');
            quickRespomnse = 'Vi que voc√™ me enviou um arquivo e parece ser um documento. Infelizmente, ainda n√£o consigo ver os dados desse documento. Por√©m, em breve, receberei uma atualiza√ß√£o para lidar com documentos aqui no WhatsApp. Tamb√©m poderei criar e enviar documentos para voc√™ em breve.';
            break;
        case 'contact':
        case 'contacts':
            console.log('O usu√°rio enviou: contact ou contacts');
            quickRespomnse = 'Vi que voc√™ me enviou um contato. Infelizmente, ainda n√£o consigo ver os dados do contato. Por√©m, em breve, receberei uma atualiza√ß√£o para lidar com contatos aqui no WhatsApp. Tamb√©m poderei enviar contatos para voc√™ em breve.';
            break;
        default:
            console.log('N√£o temos informa√ß√µes sobre esse tipo de mensagem.');
    }
    // setTimeout(() => {
    //     console.log('Pause. Continua√ß√£o do script em 3 segundos...');
    // }, 3000);  // Pausa por 5 segundos (5000 milissegundos)

    main(eventData, false);
    if (type != "text"){
        send(eventData, quickRespomnse);
        // setTimeout(() => sendReaction(eventData, "-"), 5000);
    }

    
  }
});

router.get('/contact/:phone', (req, res) => {
    const phone = req.params.phone;
    const foundContact = dataStore.findContactByPhone(phone);
    if (foundContact) {
        let chatHTML = '<style>'
            + '.user { background-color: #f3f3f3; margin: 10px; padding: 5px; border-radius: 8px; }'
            + '.assistant { background-color: #2196F3; color: white; margin: 10px; padding: 5px; border-radius: 8px; }'
            + '</style>';

        chatHTML += '<div>';

        for (const message of foundContact.history) {
            chatHTML += `<div class="${message.role}">${message.content}</div>`;
        }
        if(foundContact.history){
            chatHTML += '</div>'
            + '<br><hr><p>O hist√≥rico acima est√° na mem√≥ria tempor√°ria, clique no bot√£o para salvar o hist√≥rico no banco de dados e limpar a mem√≥ria tempor√°ria</p>'
            + `<br><button onclick="window.location.href='/api/contact/${phone}/saveHistory'">Salvar e Limpar</button>`;
        }
       
        res.send(chatHTML);
    } else {
        res.status(404).json({ message: 'Contact not found' });
    }
});

router.get('/contact/:phone/saveHistory', async (req, res) => {
    const aiNumber = "+554891088964"
    const phone = req.params.phone;
    const foundContact = dataStore.findContactByPhone(phone);
    if (foundContact) {
        // Salvar o hist√≥rico no banco de dados
        await saveMessageHistory(phone, aiNumber, foundContact.history);
        // Limpar o hist√≥rico da mem√≥ria tempor√°ria
        foundContact.history = [];

        res.send("Hist√≥rico salvo e mem√≥ria tempor√°ria limpa!");
    } else {
        res.status(404).json({ message: 'Contact not found' });
    }
});


// router.get('/contact/:phone/saveHistory', (req, res) => {
//     const phone = req.params.phone;
//     const foundContact = dataStore.findContactByPhone(phone);
//     if (foundContact) {
//         try {
//             saveMessageHistory(foundContact.history);
//             res.json({ message: 'History saved successfully!' });
//         } catch (error) {
//             res.status(500).json({ message: 'Failed to save history.', error: error.message });
//         }
//     } else {
//         res.status(404).json({ message: 'Contact not found' });
//     }
// });

router.get('/contact', (req, res) => {
    let contactListHTML = '<ul>';
    const allContacts = dataStore.contacts;

    for (let contact of allContacts) {
        contactListHTML += `<li><a href="/api/contact/${contact.phone}">${contact.phone}</a></li>`;
    }

    contactListHTML += '</ul>';
    res.send(contactListHTML);
});


export default router;
